To make the issue easier to read. I pass/hide the checking phase to make sure the amount is available for transfering money
(A.amount >= amount + minAmount)
Normally the issue is come from the transer money function:
function transfer(A, B, amount)
{
	lock( A );
	lock( B ); // can be deadlock here 
	A.amount -= amount; 
	B.amount += amount;
	write( A );
	write( B );
	unlock( B );
	unlock( A );
}	

It can give dead lock if threat 1 call transfer(A,B,amt) and threat 2 call transfer(B,A,amt) at the same time
So can give a simple solution:
	
function transfer(A, B, amount)
{
	lock( A );
	A.amount -= amount;
	write( A );
	unlock( A );
	try
	{
		lock( B );
		B.amount += amount;
		write( B );
		unlock( B );
	}
	catch(e:Error) // if can not transfer to B, add back the amount to A
	{
		lock( A );
		A.amount += amount;
		write( A );
		unlock( A );
	}
}

