start testcase_1
Thread 0: lock send mutex
Thread 0: waiting for received mutex...
Thread 0: start transfering 50 from 0 to 1
DataBase log: update balance successully for 0_A new balance: 50
DataBase log: update balance successully for 1_B new balance: 250
Thread 0: complete !
start testcase_2
Thread 0: lock send mutex
Thread 0: waiting for received mutex...
Thread 0: start transfering 50 from 1 to 0
DataBase log: update balance successully for 1_B new balance: 150
DataBase log: update balance successully for 0_A new balance: 150
Thread 0: complete !
start testcase_3
Thread 0: lock send mutex
Thread 1: lock send mutex
Thread 0: waiting for received mutex...
Thread 1: waiting for received mutex...
start testcase_4
Thread 2: lock send mutex
Thread 2: waiting for received mutex...
Thread 0: lock send mutex
Thread 0: waiting for received mutex...
Thread 1: lock send mutex
Thread 1: waiting for received mutex...
start testcase_5
Thread 1: lock send mutex
Thread 1: waiting for received mutex...
Thread 2: lock send mutex
Thread 2: waiting for received mutex...
Thread 0: lock send mutex
Thread 0: waiting for received mutex...
start testcase_6
Thread 0: lock send mutex
Thread 0: waiting for received mutex...
Thread 0: start transfering 200 from 0 to 1
Thread 0: complete !
start testcase_21
Thread 0: start transfering 50 from 0 to 1...
DataBase log: update balance successully for 0_A new balance: 50
DataBase log: update balance successully for 1_B new balance: 250
Thread 0: complete !
start testcase_22
Thread 0: start transfering 50 from 1 to 0...
DataBase log: update balance successully for 1_B new balance: 150
DataBase log: update balance successully for 0_A new balance: 150
Thread 0: complete !
start testcase_23
Thread 0: start transfering 50 from 0 to 1...
Thread 1: start transfering 50 from 1 to 0...
DataBase log: update balance successully for 0_A new balance: 50
DataBase log: update balance successully for 1_B new balance: 150
DataBase log: update balance successully for 1_B new balance: 200
Thread 0: complete !
DataBase log: update balance successully for 0_A new balance: 100
Thread 1: complete !
start testcase_24
Thread 0: start transfering 50 from 0 to 1...
DataBase log: update balance successully for 0_A new balance: 50
Thread 1: start transfering 50 from 1 to 2...
Thread 2: start transfering 50 from 2 to 0...
DataBase log: update balance successully for 1_B new balance: 250
Thread 0: complete !
DataBase log: update balance successully for 2_C new balance: 250
DataBase log: update balance successully for 0_A new balance: 100
Thread 2: complete !
DataBase log: update balance successully for 1_B new balance: 200
DataBase log: update balance successully for 2_C new balance: 300
Thread 1: complete !
start testcase_25
Thread 1: start transfering 50 from 0 to 1...
Thread 2: start transfering 50 from 1 to 2...
DataBase log: update balance successully for 0_A new balance: 50
DataBase log: update balance successully for 1_B new balance: 150
DataBase log: update balance successully for 1_B new balance: 200
Thread 1: complete !
DataBase log: update balance successully for 2_C new balance: 350
Thread 2: complete !
Thread 4: start transfering 50 from 0 to 1...
Thread 5: start transfering 50 from 1 to 2...
Thread 4: complete !
DataBase log: update balance successully for 1_B new balance: 150
DataBase log: update balance successully for 2_C new balance: 400
Thread 5: complete !
Thread 0: start transfering 50 from 2 to 0...
DataBase log: update balance successully for 2_C new balance: 350
DataBase log: update balance successully for 0_A new balance: 100
Thread 0: complete !
Thread 3: start transfering 50 from 2 to 0...
DataBase log: update balance successully for 2_C new balance: 300
DataBase log: update balance successully for 0_A new balance: 150
Thread 3: complete !
start testcase_26
Thread 0: lock send mutex
Thread 0: waiting for received mutex...
Thread 0: start transfering 200 from 0 to 1
Thread 0: complete !
